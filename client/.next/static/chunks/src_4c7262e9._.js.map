{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///home/kobus/what-to-watch/client/src/service/auth.ts"],"sourcesContent":["import axios from 'axios';\n\nconst API_URL = process.env.NEXT_PUBLIC_API_URL || 'http://localhost:5000/api';\n\nconst api = axios.create({\n  baseURL: API_URL,\n  headers: {\n    'Content-Type': 'application/json',\n  },\n});\n\n// Add authentication interceptor\napi.interceptors.request.use((config) => {\n  const token = typeof window !== 'undefined' ? localStorage.getItem('token') : null;\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n});\n\nexport interface RegisterData {\n  name: string;\n  email: string;\n  password: string;\n}\n\nexport interface LoginData {\n  email: string;\n  password: string;\n}\n\nexport interface UserData {\n  id: string;\n  name: string;\n  email: string;\n  role: string;\n  plan: string;\n}\n\nexport interface AuthResponse {\n  success: boolean;\n  token: string;\n  user: UserData;\n}\n\nexport const authService = {\n  register: async (data: RegisterData): Promise<AuthResponse> => {\n    const response = await api.post('/users/register', data);\n    if (response.data.token && typeof window !== 'undefined') {\n      localStorage.setItem('token', response.data.token);\n    }\n    return response.data;\n  },\n\n  login: async (data: LoginData): Promise<AuthResponse> => {\n    const response = await api.post('/users/login', data);\n    if (response.data.token && typeof window !== 'undefined') {\n      localStorage.setItem('token', response.data.token);\n    }\n    return response.data;\n  },\n\n  logout: (): void => {\n    if (typeof window !== 'undefined') {\n      localStorage.removeItem('token');\n    }\n  },\n\n  getProfile: async (): Promise<{ success: boolean; user: UserData }> => {\n    const response = await api.get('/users/profile');\n    return response.data;\n  },\n\n  isAuthenticated: (): boolean => {\n    if (typeof window === 'undefined') {\n      return false;\n    }\n    return !!localStorage.getItem('token');\n  },\n};\n\nexport default authService;"],"names":[],"mappings":";;;;AAEgB;AAFhB;;AAEA,MAAM,UAAU,gKAAA,CAAA,UAAO,CAAC,GAAG,CAAC,mBAAmB,IAAI;AAEnD,MAAM,MAAM,wIAAA,CAAA,UAAK,CAAC,MAAM,CAAC;IACvB,SAAS;IACT,SAAS;QACP,gBAAgB;IAClB;AACF;AAEA,iCAAiC;AACjC,IAAI,YAAY,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC;IAC5B,MAAM,QAAQ,uCAAgC,aAAa,OAAO,CAAC;IACnE,IAAI,OAAO;QACT,OAAO,OAAO,CAAC,aAAa,GAAG,CAAC,OAAO,EAAE,OAAO;IAClD;IACA,OAAO;AACT;AA2BO,MAAM,cAAc;IACzB,UAAU,OAAO;QACf,MAAM,WAAW,MAAM,IAAI,IAAI,CAAC,mBAAmB;QACnD,IAAI,SAAS,IAAI,CAAC,KAAK,IAAI,aAAkB,aAAa;YACxD,aAAa,OAAO,CAAC,SAAS,SAAS,IAAI,CAAC,KAAK;QACnD;QACA,OAAO,SAAS,IAAI;IACtB;IAEA,OAAO,OAAO;QACZ,MAAM,WAAW,MAAM,IAAI,IAAI,CAAC,gBAAgB;QAChD,IAAI,SAAS,IAAI,CAAC,KAAK,IAAI,aAAkB,aAAa;YACxD,aAAa,OAAO,CAAC,SAAS,SAAS,IAAI,CAAC,KAAK;QACnD;QACA,OAAO,SAAS,IAAI;IACtB;IAEA,QAAQ;QACN,wCAAmC;YACjC,aAAa,UAAU,CAAC;QAC1B;IACF;IAEA,YAAY;QACV,MAAM,WAAW,MAAM,IAAI,GAAG,CAAC;QAC/B,OAAO,SAAS,IAAI;IACtB;IAEA,iBAAiB;QACf,uCAAmC;;QAEnC;QACA,OAAO,CAAC,CAAC,aAAa,OAAO,CAAC;IAChC;AACF;uCAEe","debugId":null}},
    {"offset": {"line": 64, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 70, "column": 0}, "map": {"version":3,"sources":["file:///home/kobus/what-to-watch/client/src/context/AuthContext.tsx"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect, ReactNode } from 'react';\nimport { authService, UserData } from '../service/auth';\n\ninterface AuthContextType {\n  user: UserData | null;\n  loading: boolean;\n  error: string | null;\n  isAuthenticated: boolean;\n  login: (email: string, password: string) => Promise<void>;\n  register: (name: string, email: string, password: string) => Promise<void>;\n  logout: () => void;\n}\n\nconst AuthContext = createContext<AuthContextType | undefined>(undefined);\n\nexport const useAuth = () => {\n  const context = useContext(AuthContext);\n  if (context === undefined) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n\ninterface AuthProviderProps {\n  children: ReactNode;\n}\n\nexport const AuthProvider: React.FC<AuthProviderProps> = ({ children }) => {\n  const [user, setUser] = useState<UserData | null>(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n\n  useEffect(() => {\n    // Only run on client-side\n    if (typeof window === 'undefined') {\n      setLoading(false);\n      return;\n    }\n\n    // Check if user is already authenticated\n    const checkAuth = async () => {\n      try {\n        if (authService.isAuthenticated()) {\n          setLoading(true);\n          const response = await authService.getProfile();\n          setUser(response.user);\n          setIsAuthenticated(true);\n        }\n      } catch (err) {\n        console.error('Authentication check failed:', err);\n        authService.logout();\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    checkAuth();\n  }, []);\n\n  const login = async (email: string, password: string) => {\n    try {\n      setLoading(true);\n      setError(null);\n      const response = await authService.login({ email, password });\n      setUser(response.user);\n      setIsAuthenticated(true);\n    } catch (err: any) {\n      setError(err.response?.data?.message || 'Login failed');\n      throw err;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const register = async (name: string, email: string, password: string) => {\n    try {\n      setLoading(true);\n      setError(null);\n      const response = await authService.register({ name, email, password });\n      setUser(response.user);\n      setIsAuthenticated(true);\n    } catch (err: any) {\n      setError(err.response?.data?.message || 'Registration failed');\n      throw err;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const logout = () => {\n    authService.logout();\n    setUser(null);\n    setIsAuthenticated(false);\n  };\n\n  return (\n    <AuthContext.Provider\n      value={{\n        user,\n        loading,\n        error,\n        isAuthenticated,\n        login,\n        register,\n        logout,\n      }}\n    >\n      {children}\n    </AuthContext.Provider>\n  );\n};"],"names":[],"mappings":";;;;;AAAA;AACA;;;;;AAYA,MAAM,4BAAc,CAAA,GAAA,6JAAA,CAAA,gBAAa,AAAD,EAA+B;AAExD,MAAM,UAAU;;IACrB,MAAM,UAAU,CAAA,GAAA,6JAAA,CAAA,aAAU,AAAD,EAAE;IAC3B,IAAI,YAAY,WAAW;QACzB,MAAM,IAAI,MAAM;IAClB;IACA,OAAO;AACT;GANa;AAYN,MAAM,eAA4C,CAAC,EAAE,QAAQ,EAAE;;IACpE,MAAM,CAAC,MAAM,QAAQ,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAAmB;IAClD,MAAM,CAAC,SAAS,WAAW,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAAE;IACvC,MAAM,CAAC,OAAO,SAAS,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAAiB;IAClD,MAAM,CAAC,iBAAiB,mBAAmB,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAAE;IAEvD,CAAA,GAAA,6JAAA,CAAA,YAAS,AAAD;kCAAE;YACR,0BAA0B;YAC1B,uCAAmC;;YAGnC;YAEA,yCAAyC;YACzC,MAAM;oDAAY;oBAChB,IAAI;wBACF,IAAI,yHAAA,CAAA,cAAW,CAAC,eAAe,IAAI;4BACjC,WAAW;4BACX,MAAM,WAAW,MAAM,yHAAA,CAAA,cAAW,CAAC,UAAU;4BAC7C,QAAQ,SAAS,IAAI;4BACrB,mBAAmB;wBACrB;oBACF,EAAE,OAAO,KAAK;wBACZ,QAAQ,KAAK,CAAC,gCAAgC;wBAC9C,yHAAA,CAAA,cAAW,CAAC,MAAM;oBACpB,SAAU;wBACR,WAAW;oBACb;gBACF;;YAEA;QACF;iCAAG,EAAE;IAEL,MAAM,QAAQ,OAAO,OAAe;QAClC,IAAI;YACF,WAAW;YACX,SAAS;YACT,MAAM,WAAW,MAAM,yHAAA,CAAA,cAAW,CAAC,KAAK,CAAC;gBAAE;gBAAO;YAAS;YAC3D,QAAQ,SAAS,IAAI;YACrB,mBAAmB;QACrB,EAAE,OAAO,KAAU;YACjB,SAAS,IAAI,QAAQ,EAAE,MAAM,WAAW;YACxC,MAAM;QACR,SAAU;YACR,WAAW;QACb;IACF;IAEA,MAAM,WAAW,OAAO,MAAc,OAAe;QACnD,IAAI;YACF,WAAW;YACX,SAAS;YACT,MAAM,WAAW,MAAM,yHAAA,CAAA,cAAW,CAAC,QAAQ,CAAC;gBAAE;gBAAM;gBAAO;YAAS;YACpE,QAAQ,SAAS,IAAI;YACrB,mBAAmB;QACrB,EAAE,OAAO,KAAU;YACjB,SAAS,IAAI,QAAQ,EAAE,MAAM,WAAW;YACxC,MAAM;QACR,SAAU;YACR,WAAW;QACb;IACF;IAEA,MAAM,SAAS;QACb,yHAAA,CAAA,cAAW,CAAC,MAAM;QAClB,QAAQ;QACR,mBAAmB;IACrB;IAEA,qBACE,6LAAC,YAAY,QAAQ;QACnB,OAAO;YACL;YACA;YACA;YACA;YACA;YACA;YACA;QACF;kBAEC;;;;;;AAGP;IApFa;KAAA","debugId":null}},
    {"offset": {"line": 188, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}