{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///home/kobus/what-to-watch/client/src/app/movie/%5Bid%5D/page.tsx"],"sourcesContent":["'use client';\n\nimport { useState, useEffect } from 'react';\nimport React from 'react'; // Add this import\nimport Image from 'next/image';\nimport { useParams } from 'next/navigation'; // Add this import\n\n// Movie details type\ninterface MovieDetails {\n  id: number;\n  title: string;\n  poster_path: string;\n  backdrop_path: string;\n  release_date: string;\n  runtime: number;\n  vote_average: number;\n  overview: string;\n  media_type: 'movie' | 'tv';\n  genres: { id: number; name: string }[];\n  credits?: {\n    cast: {\n      id: number;\n      name: string;\n      character: string;\n      profile_path: string;\n    }[];\n  };\n  videos?: {\n    results: {\n      id: string;\n      key: string;\n      name: string;\n      site: string;\n      type: string;\n    }[];\n  };\n  watchProviders?: {\n    flatrate?: { provider_id: number; provider_name: string; logo_path: string }[];\n    rent?: { provider_id: number; provider_name: string; logo_path: string }[];\n    buy?: { provider_id: number; provider_name: string; logo_path: string }[];\n    link?: string;\n  };\n}\n\nexport default function MoviePage() {\n  // Replace the params prop with useParams hook\n  const params = useParams();\n  const movieId = params.id as string;\n  \n  const [movie, setMovie] = useState<MovieDetails | null>(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState('');\n  const [mounted, setMounted] = useState(false);\n\n  // Only run on client-side\n  useEffect(() => {\n    setMounted(true);\n  }, []);\n\n  useEffect(() => {\n    if (!mounted) return;\n    \n    const fetchMovieDetails = async () => {\n      setLoading(true);\n      \n      try {\n        const mediaType = localStorage.getItem(`mediaType_${movieId}`) ?? 'movie';\n        console.log(`Fetching movie details: /api/movies/${movieId}?type=${mediaType}`);\n        \n        const response = await fetch(`/api/movies/${movieId}?type=${mediaType}`);\n        \n        if (!response.ok) {\n          const errorText = await response.text();\n          console.error(`API Error (${response.status}):`, errorText);\n          throw new Error(`Error: ${response.status} - ${errorText}`);\n        }\n        \n        const data = await response.json();\n        setMovie(data);\n      } catch (err) {\n        console.error('Failed to fetch movie details:', err);\n        setError(`Failed to load movie details: ${err instanceof Error ? err.message : 'Unknown error'}`);\n      } finally {\n        setLoading(false);\n      }\n    };\n    \n    fetchMovieDetails();\n  }, [movieId, mounted]);\n\n  // Don't render on server\n  if (!mounted) {\n    return <div className=\"min-h-screen bg-gray-900\"></div>;\n  }\n\n  // Rest of your component stays the same\n  return (\n    <div className=\"min-h-screen bg-gray-900 text-white\">\n      {/* Your existing JSX remains unchanged */}\n      {loading && (\n        <div className=\"flex justify-center items-center min-h-screen\">\n          <div className=\"animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-blue-500\"></div>\n        </div>\n      )}\n      \n      {error && (\n        <div className=\"container mx-auto px-4 py-8\">\n          <div className=\"bg-red-500/20 border border-red-500 text-white p-4 rounded-lg\">\n            {error}\n          </div>\n        </div>\n      )}\n      \n      {movie && !loading && (\n        <>\n          {/* The rest of your existing JSX stays exactly the same */}\n        </>\n      )}\n    </div>\n  );\n}"],"names":[],"mappings":";;;;AAEA;AAGA,4OAA6C,kBAAkB;;;AAL/D;;;AA4Ce,SAAS;;IACtB,8CAA8C;IAC9C,MAAM,SAAS,CAAA,GAAA,qIAAA,CAAA,YAAS,AAAD;IACvB,MAAM,UAAU,OAAO,EAAE;IAEzB,MAAM,CAAC,OAAO,SAAS,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAAuB;IACxD,MAAM,CAAC,SAAS,WAAW,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAAE;IACvC,MAAM,CAAC,OAAO,SAAS,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAAE;IACnC,MAAM,CAAC,SAAS,WAAW,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAAE;IAEvC,0BAA0B;IAC1B,CAAA,GAAA,6JAAA,CAAA,YAAS,AAAD;+BAAE;YACR,WAAW;QACb;8BAAG,EAAE;IAEL,CAAA,GAAA,6JAAA,CAAA,YAAS,AAAD;+BAAE;YACR,IAAI,CAAC,SAAS;YAEd,MAAM;yDAAoB;oBACxB,WAAW;oBAEX,IAAI;wBACF,MAAM,YAAY,aAAa,OAAO,CAAC,CAAC,UAAU,EAAE,SAAS,KAAK;wBAClE,QAAQ,GAAG,CAAC,CAAC,oCAAoC,EAAE,QAAQ,MAAM,EAAE,WAAW;wBAE9E,MAAM,WAAW,MAAM,MAAM,CAAC,YAAY,EAAE,QAAQ,MAAM,EAAE,WAAW;wBAEvE,IAAI,CAAC,SAAS,EAAE,EAAE;4BAChB,MAAM,YAAY,MAAM,SAAS,IAAI;4BACrC,QAAQ,KAAK,CAAC,CAAC,WAAW,EAAE,SAAS,MAAM,CAAC,EAAE,CAAC,EAAE;4BACjD,MAAM,IAAI,MAAM,CAAC,OAAO,EAAE,SAAS,MAAM,CAAC,GAAG,EAAE,WAAW;wBAC5D;wBAEA,MAAM,OAAO,MAAM,SAAS,IAAI;wBAChC,SAAS;oBACX,EAAE,OAAO,KAAK;wBACZ,QAAQ,KAAK,CAAC,kCAAkC;wBAChD,SAAS,CAAC,8BAA8B,EAAE,eAAe,QAAQ,IAAI,OAAO,GAAG,iBAAiB;oBAClG,SAAU;wBACR,WAAW;oBACb;gBACF;;YAEA;QACF;8BAAG;QAAC;QAAS;KAAQ;IAErB,yBAAyB;IACzB,IAAI,CAAC,SAAS;QACZ,qBAAO,6LAAC;YAAI,WAAU;;;;;;IACxB;IAEA,wCAAwC;IACxC,qBACE,6LAAC;QAAI,WAAU;;YAEZ,yBACC,6LAAC;gBAAI,WAAU;0BACb,cAAA,6LAAC;oBAAI,WAAU;;;;;;;;;;;YAIlB,uBACC,6LAAC;gBAAI,WAAU;0BACb,cAAA,6LAAC;oBAAI,WAAU;8BACZ;;;;;;;;;;;YAKN,SAAS,CAAC,yBACT;;;;;;;AAMR;GA5EwB;;QAEP,qIAAA,CAAA,YAAS;;;KAFF","debugId":null}},
    {"offset": {"line": 126, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 131, "column": 0}, "map": {"version":3,"sources":["file:///home/kobus/what-to-watch/client/node_modules/next/navigation.js"],"sourcesContent":["module.exports = require('./dist/client/components/navigation')\n"],"names":[],"mappings":"AAAA,OAAO,OAAO","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 132, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}